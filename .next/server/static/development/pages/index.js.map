{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Register.jsx","webpack:///./components/csa/Actuators.jsx","webpack:///./components/csa/AirQuality.jsx","webpack:///./components/csa/Fire.jsx","webpack:///./components/csa/Humidity.jsx","webpack:///./components/csa/Location.jsx","webpack:///./components/csa/Temperature.jsx","webpack:///./components/helpers/Calendar.jsx","webpack:///./components/helpers/CsaComponents.jsx","webpack:///./components/helpers/Flama.jsx","webpack:///./components/helpers/MaterialUi.jsx","webpack:///./components/helpers/Slider.jsx","webpack:///./components/helpers/SubmitButton.jsx","webpack:///./components/helpers/chart/AverageDayChart.jsx","webpack:///./components/helpers/chart/AverageMonthChart.jsx","webpack:///./components/helpers/chart/ModulesDayChart.jsx","webpack:///./components/helpers/chart/ModulesMonthChart.jsx","webpack:///./pages/Csa.jsx","webpack:///./pages/Login.jsx","webpack:///./pages/index.jsx","webpack:///external \"@material-ui/core/AppBar\"","webpack:///external \"@material-ui/core/Button\"","webpack:///external \"@material-ui/core/CssBaseline\"","webpack:///external \"@material-ui/core/Dialog\"","webpack:///external \"@material-ui/core/DialogActions\"","webpack:///external \"@material-ui/core/DialogContent\"","webpack:///external \"@material-ui/core/DialogContentText\"","webpack:///external \"@material-ui/core/DialogTitle\"","webpack:///external \"@material-ui/core/Divider\"","webpack:///external \"@material-ui/core/Drawer\"","webpack:///external \"@material-ui/core/Grid\"","webpack:///external \"@material-ui/core/IconButton\"","webpack:///external \"@material-ui/core/List\"","webpack:///external \"@material-ui/core/ListItem\"","webpack:///external \"@material-ui/core/ListItemIcon\"","webpack:///external \"@material-ui/core/ListItemText\"","webpack:///external \"@material-ui/core/Paper\"","webpack:///external \"@material-ui/core/Tab\"","webpack:///external \"@material-ui/core/Tabs\"","webpack:///external \"@material-ui/core/TextField\"","webpack:///external \"@material-ui/core/Toolbar\"","webpack:///external \"@material-ui/core/Typography\"","webpack:///external \"@material-ui/core/styles\"","webpack:///external \"@material-ui/icons/AccountCircle\"","webpack:///external \"@material-ui/icons/ChevronLeft\"","webpack:///external \"@material-ui/icons/ChevronRight\"","webpack:///external \"@material-ui/icons/Cloud\"","webpack:///external \"@material-ui/icons/LocationOn\"","webpack:///external \"@material-ui/icons/Mail\"","webpack:///external \"@material-ui/icons/Menu\"","webpack:///external \"@material-ui/icons/MoveToInbox\"","webpack:///external \"@material-ui/icons/Send\"","webpack:///external \"@material-ui/icons/Toys\"","webpack:///external \"@material-ui/icons/WbSunny\"","webpack:///external \"@material-ui/icons/Whatshot\"","webpack:///external \"@material-ui/icons/WifiTethering\"","webpack:///external \"@material-ui/lab/Slider\"","webpack:///external \"axios\"","webpack:///external \"classnames\"","webpack:///external \"moment\"","webpack:///external \"next/link\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-chartjs-2\"","webpack:///external \"react-router-dom\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import {\n    withStyles, MenuItem, TextField, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, withMobileDialog\n} from \"../components/helpers/MaterialUi.jsx\"\n// Todo los componentes material UI se deben agregar en \"./helpers/MaterialUi.jsx\n\nimport SubmitButton from '../components/helpers/SubmitButton.jsx';\n\nimport React,{Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\n// impor\n\n\n//import CSALogo from '../media/CSA.jpg'\n\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    width: 500,\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\n\nclass Register extends React.Component {\n\n    constructor(...props){\n        super(...props)\n    \n        this.state = { \n            open: false,\n            form:{\n              name:'', \n              profession:'',\n              description: '', \n              email: '',\n              tel: '',\n              password: ''\n            }\n           \n        }\n        \n        this.handleOnSubmit = this.handleOnSubmit.bind(this)\n      this.handleClickOpen = this.handleClickOpen.bind(this)\n      this.handleClose = this.handleClose.bind(this)\n      this.handleChange = this.handleChange.bind(this)\n      \n      \n    }\n\n  handleOnSubmit(e){\n\n    // alert('Click')\n    // e.preventDefault()\n\n    // let form = e.target\n\n    // console.log(form.email.value)\n\n    // console.log(form.password.value)\n\n    // this.setState({\n    //     mail: form.email.value,\n    //     password: form.password.value\n    // })\n\n    // console.log(this.state)\n  }\n\n\n  handleClickOpen(){\n    this.setState({ open: true })\n  }\n\n  handleClose(){\n    this.setState({ open: false })\n  }\n\n  handleChange(e) {\n\n  console.log(e.target) //+ \" name:\"+name \n  console.log(this.state)\n  \n\n  const { target: {name,value} } = e\n\n    this.setState({\n     \n      form:{\n        ...this.state.form,\n        [name]: value\n      } \n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n      const { open, form: {name,profession,description,email,tel,password} } = this.state;\n\n\n    return (\n\n    <Fragment>\n        <Button onClick={this.handleClickOpen}>Registrarme</Button>\n        \n        <Dialog // <Dialog> Aqui va todo el Register </Dialog>\n          // fullScreen={fullScreen}\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"responsive-dialog-title\"\n          className={classes.container}\n        >\n          <DialogTitle id=\"responsive-dialog-title\">\n          \n             {/* {CSAlogo}  */}\n            \n            CSA: Formulario de Registro.\n          \n          </DialogTitle>\n          \n          <DialogContent>\n            {/* Aqui se mete el contenido */}\n            \n              <DialogContentText>\n                Ingrese su informaci√≥n para crear una cuenta:\n              </DialogContentText>\n\n            <form onSubmit={this.handleOnSubmit} className={classes.container} noValidate autoComplete=\"off\">\n                \n                <TextField\n                  id=\"standard-name\"\n                  name=\"name\"\n                  label=\"Nombre y apellido\"\n                  className={classes.textField}\n                  value={this.state.name}\n                  onChange={this.handleChange}\n                  margin=\"normal\"\n                  autoComplete=\"name\"\n                />\n              <br/>\n              <TextField\n                id=\"standard-name\"\n                name=\"profession\"\n                label=\"Profesi√≥n\"\n                className={classes.textField}\n                value={profession}\n                onChange={this.handleChange}\n                margin=\"normal\"\n                autoComplete=\"profession\"\n              />\n               <br />\n               <TextField\n                   id=\"standard-multiline-flexible\"\n                   name=\"description\"\n                   label=\"Descripci√≥n\"\n                   multiline\n                   rowsMax=\"5\"\n                   value={description}\n                   onChange={this.handleChange}\n                   className={classes.textField}\n                   margin=\"normal\"\n               />\n               <br/>\n               <TextField\n                   id=\"standard-number\"\n                   name=\"tel\"\n                   label=\"Tel√©fono\"\n                   type=\"number\"\n                   className={classes.textField}\n                   value={tel}\n                   onChange={this.handleChange}\n                   margin=\"normal\"\n                autoComplete=\"number\"\n               />\n               <br/>\n              <TextField\n                name=\"email\"\n                label=\"E-mail\"\n                className={classes.textField}\n                type = \"email\"\n                value = {email}\n                onChange={this.handleChange}\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"filled\"\n              />\n              <br/>\n              <TextField\n                id=\"standard-password-input\"\n                name=\"password\"\n                label=\"password\"\n                className={classes.textField}\n                type=\"password\"\n                value={password}\n                onChange={this.handleChange}\n                autoComplete=\"current-password\"\n                margin=\"normal\" \n              />\n    \n            </form>\n          </DialogContent>\n\n\n          <DialogActions>\n            {/* Aqui se mete los botones que realizn acciones */}\n           \n            <div onClick={this.handleClose}>\n              <SubmitButton  color=\"primary\">\n              </SubmitButton>\n            </div>\n          </DialogActions>\n         \n        </Dialog>\n    </Fragment>\n    );\n  }\n}\n\nRegister.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\nexport default withStyles(styles)(Register);","import React from \"react\";\nimport MySlider from \"../helpers/Slider.jsx\"\n\nimport SubmitButton from '../helpers/SubmitButton.jsx';\n\n\nclass Actuadores extends React.Component {\n\n    constructor(...props) {\n        super(...props)\n\n        this.state = {\n\n            value: null,\n            maxValueTemperature: null,\n            minValueTemperature: null,\n\n            maxValueHumidity: null,\n            minValueHumidity: null,\n\n            maxValueAirQuality: null\n         \n\n        }\n        \n        this.handleGetMaxValueTemperature = this.handleGetMaxValueTemperature.bind(this)\n        this.handleGetMinValueTemperature = this.handleGetMinValueTemperature.bind(this)\n\n        this.handleGetMaxValueHumidity = this.handleGetMaxValueHumidity.bind(this)\n        this.handleGetMinValueHumidity = this.handleGetMinValueHumidity.bind(this)\n\n        this.handleGetMaxValueAirQuality = this.handleGetMaxValueAirQuality.bind(this)\n        \n    }\n\n    // Temperatura:\n    handleGetMaxValueTemperature(value){\n        this.setState({ maxValueTemperature:value });\n    }\n    handleGetMinValueTemperature(value) {\n        this.setState({ minValueTemperature: value });\n    }\n\n    //Humedad:\n    handleGetMaxValueHumidity(value) {\n        this.setState({ maxValueHumidity: value });\n    }\n    handleGetMinValueHumidity(value) {\n        this.setState({ minValueHumidity: value });\n    }\n\n\n    //Calidad de Aire:\n    handleGetMaxValueAirQuality(value) {\n        this.setState({ maxValueAirQuality: value });\n    }\n   \n    render() {\n        return (\n            <div>\n                <h1>Valores de Referencia</h1>\n\n                <h2>Temperatura</h2>\n                <p>Ingrese valores m√°ximos y minimos:</p>\n                \n                <MySlider label=\"Valor M√°ximo\" unidad='¬∫C' sendValue={this.handleGetMaxValueTemperature}/>\n\n                <MySlider label=\"Valor M√≠nimo\" unidad='¬∫C'sendValue={this.handleGetMinValueTemperature} />\n\n                <h2>Humedad</h2>\n                <p>Ingrese valores m√°ximos y minimos:</p>\n                \n                <MySlider label=\"Valor M√°ximo\" unidad='%' sendValue={this.handleGetMaxValueHumidity} />\n\n                <MySlider label=\"Valor M√≠nimo\" unidad='%' sendValue={this.handleGetMinValueHumidity} />\n\n                <h2>Calidad de Aire</h2>\n                <p>Ingrese valores m√°ximos:</p>\n                <MySlider label=\"Valor M√°ximo\" unidad='%' sendValue={this.handleGetMaxValueAirQuality} />\n\n                <SubmitButton/>\n                \n\n            </div>\n           \n\n        )\n    }\n}\nexport default Actuadores ","\n// Componente Calidad Aire renderiza los componentes:\n\n// -> Calendar: Para elegir el dia que se quieren ver la graficas de Calidad Aire\n//              Ejecuta el m√©todo  reciveDataDay(e): Hace una peticion axios a la Base de datos\n//              del dia selecionado y devuelve un objeto con la informaci√≥n.\n\n// -> ModulesDayChart: Renderiza la grafica de los 4 modulos para el d√≠a selecionado\n//      Recibe por Props:\n//          - Metric: String (Humedad, Humedad o Calidad aire) \n//          - Unidad: String (¬∫C, % , ppm)\n//          - metricsDay: this.state.metricsDay -> objeto almacenado en el estado con toda la informacion.\n//          - dateData: this.state.dateData -> Almacena el d√≠a selecionado.\n\n// NOTA: Se usa un If en el render() para mostrar la gr√°fica, porque si no se ha \n//       selecionado una fecha (No se ha traido el objeto de la base de datos) y\n//        se intenta renderizar el componente ModulesDayChart genera un ERROR\n\n//  FALTA QUE CUANDO SE SELECCIONE OTRA FECHA ACTUALICE ELCOMPONENTE ModulesDayChart\n\n\n\nimport React, { Component, Fragment } from 'react' // NO necesitan comas seg√∫n el standart ES6\n// manera destructurada la clase Component\n\nimport axios from 'axios'\n\nimport { Bar, Line, Pie, Doughnut } from 'react-chartjs-2'\n// Importa el/los tipos de gr√°ficas que se renderizaran:\n// Bar: Barra, Line: Linea, Pie: Torta/pastel, Doughnut: Dona.\n\nimport Calendar from '../helpers/Calendar.jsx'\n\n\nimport ModulesDayChart from '../helpers/chart/ModulesDayChart.jsx'\n\nimport AverageDayChart from '../helpers/chart/AverageDayChart.jsx'\n\nimport ModulesMonthChart from '../helpers/chart/ModulesMonthChart.jsx'\n\nimport AverageMonthChart from '../helpers/chart/AverageMonthChart.jsx'\n\nimport moment from 'moment'\n// Se importa moment que lo usa internamente esta libreria\n\n\nclass AirQuality extends Component {\n\n    constructor(...props) {\n\n        super(...props)\n        console.log(\"Constructor\")\n\n        this.state = {\n\n            metricsDayBoolean: false, // Cambia a true Si la fecha selecionada tiene datos para ser graficados.\n\n            metricsMonthBoolean: false, // Cambia a true Si la fecha selecionada tiene datos para ser graficados.\n\n            metricsDay: {},// objeto general con la informaci√≥n de los dias\n\n            dateData: '', // Fecha de datos que se quiere \n\n            dayAverage: [],\n\n            month: '',\n\n            year: '',\n\n            metricsMonth: {},\n\n            metrica: 'Calidad de Aire'\n\n\n\n            // Fin de chartData\n        } // Fin deState\n\n        this.reciveDataDay = this.reciveDataDay.bind(this)\n\n    }\n\n\n\n    reciveDataDay(e) {\n\n\n        console.log(\"reciveDataDay\")\n\n        let dateRaw = e\n\n        let date = dateRaw.replace('/', '-').replace('/', '-')\n        // Se reemplaza '/' por '-'  ->  2018/12/13 -> 2018-12-13\n\n        let split = date.split('-')\n        // Split \"corta\" el string por donde le se√±alamos '-' y mete en un\n        // array cada pedazo: 2018-12-22 -> split[0]= 2018 ; split[1]= 12 ; split[2]= 22\n\n        let year = split[0]\n\n        let month = split[1]\n\n        console.log(year)\n\n        console.log(month)\n\n        this.setState({\n\n            dateData: date,\n            month: month,\n            year: year\n\n        })\n\n        // Petici√≥n al servidor con la informaci√≥n del D√èA\n        axios({\n            method: 'get',\n            url: `https://csaserver.herokuapp.com/sensores/datos/search?dateSearch=${date}`,\n\n        }).then(response => {\n\n            console.log(\"Respuesta\" + JSON.stringify(response))\n\n            if (response.data.ok === true) { // Si OK === true es que la Respuesta llego bien.\n\n                this.setState({\n                    metricsDay: response.data.metrics,\n                })\n                this.setState({\n                    metricsDayBoolean: true\n                })\n\n            }\n            else {\n\n                this.setState({\n                    metricsDayBoolean: false\n                })\n\n            }\n            console.log(this.state.metricsDay)\n\n        })\n            .catch(function (error) {\n                console.log(\"Este es el error\");\n                console.log(error);\n            });\n        // Fin de la petici√≥n del Objeto metricsDay\n\n        // Petici√≥n al servidor con la informaci√≥n del MES\n\n        console.log(\"metricsMonth :\")\n        console.log(this.state.metricsMonth)\n\n        console.log(\"Month :\")\n        console.log(month)\n\n        axios({\n            method: 'get',\n            url: `https://csaserver.herokuapp.com/sensores/datos/${month}-2018`,\n\n        }).then(response => {\n\n            if (response.data.ok === true) { // Si OK === true es que la Respuesta llego bien.\n\n                this.setState({\n                    metricsMonth: response.data.metrics.monthsArray\n                })\n                this.setState({\n                    metricsMonthBoolean: true\n                })\n\n            }\n            else {\n\n                this.setState({\n                    metricsMonthBoolean: false\n                })\n\n            }\n\n        }).catch(function (error) {\n            console.log(\"Este es el error\");\n            console.log(error);\n        });\n        // Fin de la petici√≥n del Objeto metricsDay\n\n        console.log(\"metricsMonth\")\n        console.log(this.state.metricsMonth)\n    }\n\n\n    render() {\n\n        console.log(\"Render\")\n        console.log(this.state.metricsDay)\n\n        return (\n            <div>\n                <h2 className=\"teal-text center\">{this.state.metric}</h2>\n                <div className=\"row\">\n                    <h3 className=\"col s12 center \">Datos de d√≠a</h3>\n\n                    <div className=\"col s12 center\">\n\n                        Seleccione el d√≠a que desee consultar.\n                     <Calendar name=\"date\" onChange={this.reciveDataDay}> </Calendar>\n\n                    </div>\n                </div>\n\n                {\n\n                    (this.state.metricsDayBoolean === true && this.state.metricsMonthBoolean === true)\n                        ?\n                        <Fragment>\n                            <ModulesDayChart metrica={this.state.metrica} metric=\"AirQuality\" unidad=\"%\" metricsDay={this.state.metricsDay} dateData={this.state.dateData} />\n                            <br />\n                            <AverageDayChart metrica={this.state.metrica} metric=\"AirQuality\" unidad=\"%\" metricsDay={this.state.metricsDay} dateData={this.state.dateData} />\n                            <br />\n                            <ModulesMonthChart metrica={this.state.metrica} metric=\"AirQuality\" unidad=\"%\" metricsMonth={this.state.metricsMonth} dateData={this.state.dateData} />\n                            <br />\n                            <AverageMonthChart metrica={this.state.metrica} metric=\"AirQuality\" unidad=\"%\" metricsMonth={this.state.metricsMonth} dateData={this.state.dateData} />\n                        </Fragment>\n                        :\n                        <h2>Ingresa una fecha con informaci√≥n</h2>\n                }\n\n            </div>\n        )\n\n    }\n}\n\nexport default AirQuality\n\n","import React, { Component } from 'react' // NO necesitan comas seg√∫n el standart ES6\n// manera destructurada la clase Component\n\nimport Flama from '../helpers/Flama.jsx'\n\nexport default class Fire extends Component {\n\n    constructor(...props) {\n\n        super(...props)\n\n        this.state = {\n\n            fire: [1, 0, 0, 0]\n\n        }\n        // Siempre que se crea un m√©todo se debe hacer el autobinding: Enlaza el this de la instancia con el this del constructor (buena practica) dentro del constructor\n        this.handleOnClick = this.handleOnClick.bind(this)\n    }\n\n    handleOnClick(e) {\n\n        // alert('click') \n        document.getElementById('flama').classList.toggle('white')\n        document.getElementById('flama').classList.toggle('red')\n    }\n\n\n    render() {\n        return (\n\n\n            <div className=\"row\">\n\n                <h1 className=\"col s12 center teal-text hoverable\">SENSORES FLAMA</h1>\n\n                <Flama className=\"hoverable\" modulo=\"1\" fire={this.state.fire[0]} ></Flama>\n\n                <Flama modulo=\"2\" fire={this.state.fire[1]} ></Flama>\n\n                <Flama modulo=\"3\" fire={this.state.fire[2]} ></Flama>\n\n                <Flama modulo=\"4\" fire={this.state.fire[3]} ></Flama>\n\n            </div>\n\n\n        )//Fin return\n\n    } //Fin render()\n\n} // Fin Class","\n// Componente Humedad renderiza los componentes:\n\n// -> Calendar: Para elegir el dia que se quieren ver la graficas de Humedad\n//              Ejecuta el m√©todo  reciveDataDay(e): Hace una peticion axios a la Base de datos\n//              del dia selecionado y devuelve un objeto con la informaci√≥n.\n\n// -> ModulesDayChart: Renderiza la grafica de los 4 modulos para el d√≠a selecionado\n//      Recibe por Props:\n//          - Metric: String (Humedad, Humedad o Calidad aire) \n//          - Unidad: String (¬∫C, % , ppm)\n//          - metricsDay: this.state.metricsDay -> objeto almacenado en el estado con toda la informacion.\n//          - dateData: this.state.dateData -> Almacena el d√≠a selecionado.\n\n// NOTA: Se usa un If en el render() para mostrar la gr√°fica, porque si no se ha \n//       selecionado una fecha (No se ha traido el objeto de la base de datos) y\n//        se intenta renderizar el componente ModulesDayChart genera un ERROR\n\n//  FALTA QUE CUANDO SE SELECCIONE OTRA FECHA ACTUALICE ELCOMPONENTE ModulesDayChart\n\n\n\nimport React, { Component, Fragment } from 'react' // NO necesitan comas seg√∫n el standart ES6\n// manera destructurada la clase Component\n\nimport axios from 'axios'\n\nimport { Bar, Line, Pie, Doughnut } from 'react-chartjs-2'\n// Importa el/los tipos de gr√°ficas que se renderizaran:\n// Bar: Barra, Line: Linea, Pie: Torta/pastel, Doughnut: Dona.\n\nimport Calendar from '../helpers/Calendar.jsx'\n\n\nimport ModulesDayChart from '../helpers/chart/ModulesDayChart.jsx'\n\nimport AverageDayChart from '../helpers/chart/AverageDayChart.jsx'\n\nimport ModulesMonthChart from '../helpers/chart/ModulesMonthChart.jsx'\n\nimport AverageMonthChart from '../helpers/chart/AverageMonthChart.jsx'\n\nimport moment from 'moment'\n// Se importa moment que lo usa internamente esta libreria\n\n\nclass Humidity extends Component {\n\n    constructor(...props) {\n\n        super(...props)\n        console.log(\"Constructor\")\n\n        this.state = {\n\n            metricsDayBoolean: false, // Cambia a true Si la fecha selecionada tiene datos para ser graficados.\n\n            metricsMonthBoolean: false, // Cambia a true Si la fecha selecionada tiene datos para ser graficados.\n\n            metricsDay: {},// objeto general con la informaci√≥n de los dias\n\n            dateData: '', // Fecha de datos que se quiere \n\n            dayAverage: [],\n\n            month: '',\n\n            year: '',\n\n            metricsMonth: {},\n\n            metrica: 'Humedad'\n\n\n\n            // Fin de chartData\n        } // Fin deState\n\n        this.reciveDataDay = this.reciveDataDay.bind(this)\n\n    }\n\n\n\n    reciveDataDay(e) {\n\n\n        console.log(\"reciveDataDay\")\n\n        let dateRaw = e\n\n        let date = dateRaw.replace('/', '-').replace('/', '-')\n        // Se reemplaza '/' por '-'  ->  2018/12/13 -> 2018-12-13\n\n        let split = date.split('-')\n        // Split \"corta\" el string por donde le se√±alamos '-' y mete en un\n        // array cada pedazo: 2018-12-22 -> split[0]= 2018 ; split[1]= 12 ; split[2]= 22\n\n        let year = split[0]\n\n        let month = split[1]\n\n        console.log(year)\n\n        console.log(month)\n\n        this.setState({\n\n            dateData: date,\n            month: month,\n            year: year\n\n        })\n\n        // Petici√≥n al servidor con la informaci√≥n del D√èA\n        axios({\n            method: 'get',\n            url: `https://csaserver.herokuapp.com/sensores/datos/search?dateSearch=${date}`,\n\n        }).then(response => {\n\n            console.log(\"Respuesta\" + JSON.stringify(response))\n\n            if (response.data.ok === true) { // Si OK === true es que la Respuesta llego bien.\n\n                this.setState({\n                    metricsDay: response.data.metrics,\n                })\n                this.setState({\n                    metricsDayBoolean: true\n                })\n\n            }\n            else {\n\n                this.setState({\n                    metricsDayBoolean: false\n                })\n\n            }\n            console.log(this.state.metricsDay)\n\n        })\n            .catch(function (error) {\n                console.log(\"Este es el error\");\n                console.log(error);\n            });\n        // Fin de la petici√≥n del Objeto metricsDay\n\n        // Petici√≥n al servidor con la informaci√≥n del MES\n\n        console.log(\"metricsMonth :\")\n        console.log(this.state.metricsMonth)\n\n        console.log(\"Month :\")\n        console.log(month)\n\n        axios({\n            method: 'get',\n            url: `https://csaserver.herokuapp.com/sensores/datos/${month}-2018`,\n\n        }).then(response => {\n\n            if (response.data.ok === true) { // Si OK === true es que la Respuesta llego bien.\n\n                this.setState({\n                    metricsMonth: response.data.metrics.monthsArray\n                })\n                this.setState({\n                    metricsMonthBoolean: true\n                })\n\n            }\n            else {\n\n                this.setState({\n                    metricsMonthBoolean: false\n                })\n\n            }\n\n        }).catch(function (error) {\n            console.log(\"Este es el error\");\n            console.log(error);\n        });\n        // Fin de la petici√≥n del Objeto metricsDay\n\n        console.log(\"metricsMonth\")\n        console.log(this.state.metricsMonth)\n    }\n\n\n    render() {\n\n        console.log(\"Render\")\n        console.log(this.state.metricsDay)\n\n        return (\n            <div>\n                <h2 className=\"teal-text center\">{this.state.metric}</h2>\n                <div className=\"row\">\n                    <h3 className=\"col s12 center \">Datos de d√≠a</h3>\n\n                    <div className=\"col s12 center\">\n\n                        Seleccione el d√≠a que desee consultar.\n                     <Calendar name=\"date\" onChange={this.reciveDataDay}> </Calendar>\n\n                    </div>\n                </div>\n\n                <h5 className=\"card teal darken-1 white-text center hoverable\">Promedio de Humedad del dias: {this.state.dayAverage}Humedad</h5>\n\n                {\n\n                    (this.state.metricsDayBoolean === true && this.state.metricsMonthBoolean === true)\n                        ?\n                        <Fragment>\n                            <ModulesDayChart metrica={this.state.metrica} metric=\"Humidity\" unidad=\"%\" metricsDay={this.state.metricsDay} dateData={this.state.dateData} />\n                            <br />\n                            <AverageDayChart metrica={this.state.metrica} metric=\"Humidity\" unidad=\"%\" metricsDay={this.state.metricsDay} dateData={this.state.dateData} />\n                            <br />\n                            <ModulesMonthChart metrica={this.state.metrica} metric=\"Humidity\" unidad=\"%\" metricsMonth={this.state.metricsMonth} dateData={this.state.dateData} />\n                            <br />\n                            <AverageMonthChart metrica={this.state.metrica} metric=\"Humidity\" unidad=\"%\" metricsMonth={this.state.metricsMonth} dateData={this.state.dateData} />\n                        </Fragment>\n                        :\n                        <h2>Ingresa una fecha con informaci√≥n</h2>\n                }\n\n            </div>\n        )\n\n    }\n}\n\nexport default Humidity\n\n","import React, { Component } from 'react' // NO necesitan comas seg√∫n el standart ES6\n// manera destructurada la clase Component\n\n// import { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\n\nexport class Locacion extends Component {\n    render() {\n        return (\n\n            <div>\n                <h1>Ubicaci√≥n del emplazamiento</h1>\n                  \n            </div>\n        );\n    }\n}\n\nexport default Locacion","\n// Componente temperatura renderiza los componentes:\n\n// -> Calendar: Para elegir el dia que se quieren ver la graficas de Temperatura\n//              Ejecuta el m√©todo  reciveDataDay(e): Hace una peticion axios a la Base de datos\n//              del dia selecionado y devuelve un objeto con la informaci√≥n.\n       \n// -> ModulesDayChart: Renderiza la grafica de los 4 modulos para el d√≠a selecionado\n//      Recibe por Props:\n//          - Metric: String (Temperatura, Humedad o Calidad aire) \n//          - Unidad: String (¬∫C, % , ppm)\n//          - metricsDay: this.state.metricsDay -> objeto almacenado en el estado con toda la informacion.\n//          - dateData: this.state.dateData -> Almacena el d√≠a selecionado.\n\n// NOTA: Se usa un If en el render() para mostrar la gr√°fica, porque si no se ha \n//       selecionado una fecha (No se ha traido el objeto de la base de datos) y\n//        se intenta renderizar el componente ModulesDayChart genera un ERROR\n     \n//  FALTA QUE CUANDO SE SELECCIONE OTRA FECHA ACTUALICE ELCOMPONENTE ModulesDayChart\n\n\n\nimport React, { Component, Fragment} from 'react' // NO necesitan comas seg√∫n el standart ES6\n// manera destructurada la clase Component\n\nimport axios from 'axios'\n\nimport { Bar, Line, Pie, Doughnut } from 'react-chartjs-2'\n// Importa el/los tipos de gr√°ficas que se renderizaran:\n// Bar: Barra, Line: Linea, Pie: Torta/pastel, Doughnut: Dona.\n\nimport Calendar from '../helpers/Calendar.jsx'\n\n\nimport ModulesDayChart from '../helpers/chart/ModulesDayChart.jsx'\n\nimport AverageDayChart from '../helpers/chart/AverageDayChart.jsx'\n\nimport ModulesMonthChart from '../helpers/chart/ModulesMonthChart.jsx'\n\nimport AverageMonthChart from '../helpers/chart/AverageMonthChart.jsx'\n\nimport moment from 'moment'\n// Se importa moment que lo usa internamente esta libreria\n\n\nclass Temperature extends Component{\n\n    constructor(...props) {\n\n        super(...props)\n        console.log(\"Constructor\")\n\n        this.state = {\n\n            metricsDayBoolean: false, // Cambia a true Si la fecha selecionada tiene datos para ser graficados.\n\n            metricsMonthBoolean: false, // Cambia a true Si la fecha selecionada tiene datos para ser graficados.\n\n            metricsDay: {},// objeto general con la informaci√≥n de los dias\n    \n            dateData: '', // Fecha de datos que se quiere \n            \n            dayAverage: [],\n\n            month:'',\n\n            year:'',\n\n            metricsMonth: {},\n\n            metrica: 'Temperatura'\n\n            \n         \n            // Fin de chartData\n        } // Fin deState\n\n        this.reciveDataDay = this.reciveDataDay.bind(this)\n\n    }\n\n    \n\n    reciveDataDay(e) {\n\n       \n        console.log(\"reciveDataDay\")\n\n        let dateRaw = e\n\n        let date = dateRaw.replace('/', '-').replace('/', '-')\n        // Se reemplaza '/' por '-'  ->  2018/12/13 -> 2018-12-13\n\n        let split = date.split('-')\n        // Split \"corta\" el string por donde le se√±alamos '-' y mete en un\n        // array cada pedazo: 2018-12-22 -> split[0]= 2018 ; split[1]= 12 ; split[2]= 22\n        \n        let year = split[0]\n\n        let month = split[1]\n\n        console.log(year)\n\n        console.log(month)\n\n        this.setState({\n\n            dateData: date,\n            month: month,\n            year: year\n\n        })\n\n        // Petici√≥n al servidor con la informaci√≥n del D√èA\n        axios({\n            method: 'get',\n            url: `https://csaserver.herokuapp.com/sensores/datos/search?dateSearch=${date}`,\n\n        }).then(response => {\n\n            console.log(\"Respuesta\"+ JSON.stringify(response))\n\n            if (response.data.ok===true){ // Si OK === true es que la Respuesta llego bien.\n\n                this.setState({\n                    metricsDay: response.data.metrics,\n                })\n                this.setState({\n                    metricsDayBoolean: true\n                })\n            \n            }\n            else{\n\n                this.setState({\n                    metricsDayBoolean: false\n                })\n\n            }\n            console.log(this.state.metricsDay)\n\n        })\n            .catch(function (error) {\n                console.log(\"Este es el error\");\n                console.log(error);\n            });\n        // Fin de la petici√≥n del Objeto metricsDay\n    \n        // Petici√≥n al servidor con la informaci√≥n del MES\n       \n        console.log(\"metricsMonth :\")\n        console.log(this.state.metricsMonth)\n\n        console.log(\"Month :\")\n        console.log(month)\n\n        axios({\n            method: 'get',\n            url: `https://csaserver.herokuapp.com/sensores/datos/${month}-2018`,\n\n        }).then(response => {\n\n            if (response.data.ok === true) { // Si OK === true es que la Respuesta llego bien.\n\n                this.setState({\n                    metricsMonth: response.data.metrics.monthsArray\n                })\n                this.setState({\n                    metricsMonthBoolean: true\n                })\n\n            }\n            else {\n\n                this.setState({\n                    metricsMonthBoolean: false\n                })\n\n            }\n           \n            }).catch(function (error) {\n                console.log(\"Este es el error\");\n                console.log(error);\n            });\n        // Fin de la petici√≥n del Objeto metricsDay\n\n        console.log(\"metricsMonth\")\n        console.log(this.state.metricsMonth)\n    }\n    \n         \n    render() {\n    \n        console.log(\"Render\")\n        console.log(this.state.metricsDay)\n\n        return (\n            <div>\n                <h2 className=\"teal-text center\">{this.state.metric}</h2>\n                <div className=\"row\">\n                    <h3 className=\"col s12 center \">Datos de d√≠a</h3>\n\n                    <div className=\"col s12 center\">\n\n                        Seleccione el d√≠a que desee consultar.\n                     <Calendar name=\"date\" onChange={this.reciveDataDay}> </Calendar>\n\n                    </div> \n                </div>\n                \n                {\n               \n                    (this.state.metricsDayBoolean === true && this.state.metricsMonthBoolean === true)\n                ?\n                    <Fragment>  \n                        <ModulesDayChart metrica={this.state.metrica} metric=\"Temperature\"  unidad=\"¬∫C\" metricsDay={this.state.metricsDay} dateData={this.state.dateData}/>\n                        <br/>\n                            <AverageDayChart metrica={this.state.metrica} metric=\"Temperature\" unidad=\"¬∫C\" metricsDay={this.state.metricsDay} dateData={this.state.dateData} />\n                        <br/>\n                            <ModulesMonthChart metrica={this.state.metrica} metric=\"Temperature\" unidad=\"¬∫C\" metricsMonth={this.state.metricsMonth} dateData={this.state.dateData}/>\n                        <br />\n                            <AverageMonthChart metrica={this.state.metrica} metric=\"Temperature\" unidad=\"¬∫C\" metricsMonth={this.state.metricsMonth} dateData={this.state.dateData} />\n\n                    </Fragment>  \n                :\n                <h2>Ingresa una fecha con informaci√≥n</h2>\n                }\n\n            </div>\n        )\n\n    }\n}\n\nexport default Temperature\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport moment from 'moment';\n\n\nconst styles = theme => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        width: 200,\n    },\n});\n\nclass Calendar extends Component {\n\n    constructor(...props) {\n        super(...props)\n\n        this.state = {\n            // Estado\n            startDate: moment().format(\"YYYY/MM/DD\")\n            // Fecha inicial Ninguna\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n\n        this.handleOnChange = this.handleOnChange.bind(this)\n    }\n\n    handleChange(e) {\n\n        console.log(e.target.value)\n\n        let dateSelected = e.target.value\n\n        // Iguala el estado con la fecha (Que elige el usuario) cuando haya un cambio\n\n        this.setState({\n            startDate: dateSelected // Parametro que recibe el manejador\n        })\n\n        this.props.onChange(dateSelected)\n        // Se ejecuta el m√©todo reciveDataDay() declarado en el padre que se pas√≥ como\n        // props: onChange = {this.reciveDataDay} y que devuelva el valor de date\n    }\n\n    handleOnChange() {\n        console.log(this.state.startDate)\n    }\n\n\n\n    render() {\n        const { classes } = this.props\n        return (\n\n            <form className={classes.container} noValidate>\n                <TextField\n                    id={this.props}\n                    label=\"Fecha\"\n                    type=\"date\"\n                    name={this.props}\n                    onChange={this.handleChange}\n                    onClick={this.handleOnChange}\n                    defaultValue={this.state.startDate}\n                    value={this.state.startDate}\n                    className={classes.textField}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n            </form>\n        )\n    }\n}\n\nCalendar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Calendar);\n","import Locacion from \"../csa/Location.jsx\";\nimport Temperature from \"../csa/Temperature.jsx\";\nimport AirQuality from \"../csa/AirQuality.jsx\";\nimport Humidity from \"../csa/Humidity.jsx\";\nimport Fire from \"../csa/Fire.jsx\";\nimport Actuators from \"../csa/Actuators.jsx\";\n\n\nexport {\n    Locacion,\n    Temperature,\n    AirQuality,\n    Humidity,\n    Fire,\n    Actuators\n} ","import React, { Component } from 'react' // NO necesitan comas seg√∫n el standart ES6\n// manera destructurada la clase Component\n\n\nexport default class Flama extends Component {\n\n    constructor(...props) {\n\n        super(...props)\n    }\n\n    render() {\n        return (\n            <div className=\"col s6 center\">\n\n                {(this.props.fire === 0)\n                    ?\n                    <i className=\"material-icons large circle white center-align hoverable\"  >whatshot</i>\n\n                    :\n                    <i className=\"material-icons large circle red center-align hoverable\" >whatshot</i>\n\n                }\n                <p className=\"black-text\">M√≥dulo {this.props.modulo}</p>\n\n\n            </div>\n\n        )//Fin return\n\n    } //Fin render()\n\n} // Fin Class","import { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Button from '@material-ui/core/Button';\n\n\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\nimport WhatshotIcon from \"@material-ui/icons/Whatshot\";\nimport ToysIcon from \"@material-ui/icons/Toys\";\nimport WifiTetheringIcon from \"@material-ui/icons/WifiTethering\";\n\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\n\nimport TextField from '@material-ui/core/TextField';\n\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\n\nimport DialogActions from \"@material-ui/core/DialogActions\";\n\nimport SendIcon from '@material-ui/icons/Send';\n\nexport {\n    withStyles,\n    Drawer,\n    CssBaseline,\n    AppBar,\n    Toolbar,\n    Tab,\n    Tabs,\n    List,\n    Typography,\n    Divider,\n    IconButton,\n    MenuIcon,\n    Button,\n    LocationOnIcon,\n    WbSunnyIcon,\n    CloudIcon,\n    WhatshotIcon,\n    ToysIcon,\n    WifiTetheringIcon,\n    ChevronLeftIcon,\n    ChevronRightIcon,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    InboxIcon,\n    MailIcon,\n    Paper,\n    Grid,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    TextField,\n    AccountCircleIcon,\n    DialogActions,\n    SendIcon\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography'\nimport Slider from '@material-ui/lab/Slider'\n\nconst styles = {\n    root: {\n        width: 300,\n    },\n    slider: {\n        padding: '22px 0px',\n    },\n};\n\nclass MySlider extends React.Component {\n    \n    state = {\n        \n        value: null,\n    };\n\n    handleChange = (event, value) => {\n        this.setState({ value });\n        this.props.sendValue(value)\n    };\n\n    render() {\n        const { classes } = this.props;\n        const { value } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <Typography id=\"label\">{this.props.label}: {this.state.value}{this.props.unidad}</Typography>\n                <Slider\n                    classes={{ container: classes.slider }}\n                    value={value}\n                    aria-labelledby=\"label\"\n                    onChange={this.handleChange}\n                    min={0}\n                    max={100}\n                    step={1}\n                    \n                />\n            </div>\n        );\n    }\n}\n\nMySlider.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MySlider);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport {\n    withStyles, Button, SendIcon\n} from \"./MaterialUi.jsx\"\n// Todo los componentes material UI se deben agregar en \"./helpers/MaterialUi.jsx\n\n\n\nconst styles = theme => ({\n    button: {\n        margin: theme.spacing.unit,\n    },\n    leftIcon: {\n        marginRight: theme.spacing.unit,\n    },\n    rightIcon: {\n        marginLeft: theme.spacing.unit,\n    },\n    iconSmall: {\n        fontSize: 20,\n    },\n});\n\nfunction SubmitButton(props) {\n    const { classes } = props;\n    return (\n        <div>\n\n            <Button onClick={props.handleOnClick} variant=\"contained\" color=\"primary\" className={classes.button}>\n                Send\n                 <SendIcon className={classes.rightIcon}/>\n            </Button>\n\n        </div>\n    );\n}\n\nSubmitButton.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SubmitButton);","\n// ModulesDayChart: Gr√°fica de los 4 modulos para el d√≠a selecionado \n//                  (Se le pasa como props).\n\n\nimport React, { Component } from 'react' // NO necesitan comas seg√∫n el standart ES6\n// manera destructurada la clase Component\n\nimport { Bar, Line, Pie, Doughnut } from 'react-chartjs-2';\n// Importa el/los tipos de gr√°ficas que se renderizaran:\n// Bar: Barra, Line: Linea, Pie: Torta/pastel, Doughnut: Dona.\n\nclass AverageDayChart extends Component {\n\n    constructor(...props) {\n\n        super(...props)\n\n\n        this.state = {\n\n            metricsDay: this.props.metricsDay,// objeto general con la informaci√≥n de los dias\n\n            chartDataAverageDay: {}, //Datos de grafica por dia.\n\n            dateData: this.props.dateData, // Fecha de datos que se quiere \n\n            unidad: this.props.unidad,\n\n            metric: this.props.metric,\n\n            metrica: this.props.metrica\n\n\n            // Fin de chartData\n        } // Fin deState\n\n    }\n\n    componentWillMount() {\n\n        // m√©todo llamado al recibir nuevas propiedades que sirve para actualizar el estado\n        console.log(\"componentDidMount\")\n        console.log(\"componentDidMount\")\n        console.log(\"componentDidMount\")\n\n        console.log(\"metricsDay: State\")\n        console.log(this.state.metricsDay)\n\n        let metric = this.state.metric // (temperatura, calidad de aire, humedad)\n\n        // Se evalua la m√©trica para saber si es temperatura, calidad de aire, humedad\n        // y dependiendo del resultado se le manda dentro del al setState this.state.metricsDay.temperature\n\n        let dataMetric\n\n        if (metric === \"Temperature\") {\n\n            dataMetric = this.state.metricsDay.totalModules.temperature\n        }\n        else if (metric === \"AirQuality\") {\n\n            dataMetric = this.state.metricsDay.totalModules.airQuality\n        }\n        else if (metric === \"Humidity\") {\n\n            dataMetric = this.state.metricsDay.totalModules.humidity\n        }\n\n        console.log(\"this.state.metricsDay.totalModules.temperature :\")\n        console.log(this.state.metricsDay.totalModules.temperature)\n\n        console.log(\"dataMetric: AverageDayChart\")\n        console.log(dataMetric)\n        \n\n        // Grafica de los 4 Modulos del dia\n        this.setState({\n\n            chartDataAverageDay: {\n\n                labels: this.state.metricsDay.hours,\n\n                datasets: [\n\n                    {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                        label: `M1 ${this.state.metrica} ${this.state.unidad}`, //Se le pasa la metrica y su unidad\n                        data: dataMetric,\n\n                        fillColor: 'rgba( 215, 91, 181,1)',\n                        backgroundColor: 'rgba(125, 291, 181, 0.5)',\n\n                        strokeColor: 'rgba(125,32,190,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }\n\n                ]//Fin del DataSets\n\n            }// Fin de chartData\n        })\n\n    }\n\n    componentWillReceiveProps() {\n        console.log(\"componentWillReceiveProps\")\n        // m√©todo llamado al recibir nuevas propiedades que sirve para actualizar el estado\n        // con base a las nuevas propiedades.\n\n        this.setState({\n\n            metricsDay: this.props.metricsDay,\n            dateData: this.props.dateData\n\n        })\n\n\n        // Se evalua la m√©trica para saber si es temperatura, calidad de aire, humedad\n        // y dependiendo del resultado se le manda dentro del al setState this.state.metricsDay.temperature\n\n        let metric = this.props.metric // (temperatura, calidad de aire, humedad)\n\n        let dataMetric\n\n        if (metric === \"Temperature\") {\n\n            dataMetric = this.props.metricsDay.totalModules.temperature\n        }\n        else if (metric === \"AirQuality\") {\n\n            dataMetric = this.props.metricsDay.totalModules.airQuality\n        }\n        else if (metric === \"Humidity\") {\n\n            dataMetric = this.props.metricsDay.totalModules.humidity\n        }\n\n        console.log(\"this.state.metricsDay.totalModules.temperature :\")\n        console.log(this.props.metricsDay.totalModules.temperature)\n\n        console.log(\"dataMetric:\")\n        console.log(dataMetric)\n\n        this.setState({\n\n            chartDataAverageDay: {\n\n                labels: this.props.metricsDay.hours,\n\n                datasets: [\n\n                    {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                        label: `M1 ${this.state.metrica} ${this.state.unidad}`, //Se le pasa la metrica y su unidad\n                        data: dataMetric,\n\n                        fillColor: 'rgba( 215, 91, 181,1)',\n                        backgroundColor: 'rgba(125, 291, 181, 0.5)',\n\n                        strokeColor: 'rgba(125,32,190,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }\n\n                ]//Fin del DataSets\n\n            }// Fin de chartData\n        })\n\n    }\n\n\n    render() {\n\n        let unidad = this.state.unidad // Para llevar el valor de la unidad hasta Ticks (Etiqueta eje Y). \n\n        return (\n\n            <div className=\"Chart\">\n                <Line\n                    data={this.state.chartDataAverageDay}\n                    //width={100}\n                    //height={50}\n                    options={{\n                        title: {\n                            display: true,\n                            text: `Promedio de ${this.state.metrica}: d√≠a ${this.state.dateData}`,\n                            fontSize: 30,\n                            fontColor: 'teal'\n\n                        },\n                        legend: {\n                            display: true,\n                            labels: {\n                                fontColor: 'black',\n                                fontSize: 20\n                            }\n                        },\n                        scales: {\n\n                            yAxes: [\n\n                                {\n                                    scaleLabel: {\n                                        display: 'true',\n                                        labelString: `${this.state.metrica}`,\n                                        fontColor: 'black',\n                                        fontSize: 20,\n                                        position: 'top'\n                                    },\n                                    ticks: {\n                                        display: true,\n                                        labelString: `${this.state.unidad}`,\n                                        fontSize: 20,\n                                        fontColor: 'black',\n                                        // Include a dollar sign in the ticks\n\n                                        callback: function (value, index, values, ) {\n\n                                            return `${value} ${unidad}`\n\n                                        }\n                                    }\n                                }],\n\n                            xAxes: [{\n                                scaleLabel: {\n                                    display: 'true',\n                                    labelString: 'Hora',\n                                    fontColor: 'black',\n                                    fontSize: 20,\n                                    position: 'top'\n                                },\n\n                                ticks: {\n                                    display: true,\n                                    labelString: 'Hora',\n                                    fontSize: 16,\n                                    fontColor: 'black',\n\n                                }\n                            }]\n                        }\n\n                    }}\n                />\n\n            </div>\n\n        )\n    }\n}\n\nexport default AverageDayChart","\n// ModulesDayChart: Gr√°fica de los 4 modulos para el d√≠a selecionado \n//                  (Se le pasa como props).\n\n\nimport React, { Component } from 'react' // NO necesitan comas seg√∫n el standart ES6\n// manera destructurada la clase Component\n\nimport { Bar, Line, Pie, Doughnut } from 'react-chartjs-2';\n// Importa el/los tipos de gr√°ficas que se renderizaran:\n// Bar: Barra, Line: Linea, Pie: Torta/pastel, Doughnut: Dona.\n\nclass AverageMonthChart extends Component {\n\n    constructor(...props) {\n\n        super(...props)\n\n\n        this.state = {\n\n            metricsMonth: this.props.metricsMonth,// objeto general con la informaci√≥n de los dias\n\n            chartDataAverageMonth: {}, //Datos de grafica por dia.\n\n            dateData: this.props.dateData, // Fecha de datos que se quiere \n\n            unidad: this.props.unidad,\n\n            metric: this.props.metric,\n\n            metrica: this.props.metrica\n\n\n            // Fin de chartData\n        } // Fin deState\n\n    }\n\n    componentWillMount() {\n\n        // m√©todo llamado al recibir nuevas propiedades que sirve para actualizar el estado\n        console.log(\"componentDidMount\")\n\n\n        let metric = this.state.metric // (temperatura, calidad de aire, humedad)\n\n        // Se evalua la m√©trica para saber si es temperatura, calidad de aire, humedad\n        // y dependiendo del resultado se le manda dentro del al setState this.state.metricsDay.temperature\n\n        let TotalMetricMonth = [] // Donde se guardar√° el array con el promedio mensual\n\n        if (metric === \"Temperature\") {\n\n            this.state.metricsMonth.forEach(element => {\n\n                TotalMetricMonth.push(element.totalTemperature)\n            })\n        }\n        else if (metric === \"AirQuality\") {\n\n            this.state.metricsMonth.forEach(element => {\n\n                TotalMetricMonth.push(element.totalAirQuality)\n            })\n        }\n        else if (metric === \"Humidity\") {\n\n            this.state.metricsMonth.forEach(element => {\n\n                TotalMetricMonth.push(element.totalHumidity)\n            })\n\n        }\n\n        console.log(\"TotalMetricMonth: \")\n        console.log(TotalMetricMonth)\n\n        // Se crea el array con los di√°s (eje x de la gr√°fica)\n\n        let daysArray = [] // Crea arreglo vacio para meter id con los dias\n\n        this.state.metricsMonth.forEach(element => {\n            // Itera sobre el objeto metricsMonth y coje cada valor del id(d√≠as donde hay info) ylos guarda dentro de daysArray\n            daysArray.push(element.id)\n\n        })\n\n        // Grafica de los 4 Modulos del mes\n        this.setState({\n\n            chartDataAverageMonth: {\n\n                labels: daysArray,\n\n                datasets: [\n\n                    {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                        label: `Promedio de ${this.state.metrica}: ${this.state.unidad}`, //Se le pasa la metrica y su unidad\n                        data: TotalMetricMonth,\n\n                        fillColor: 'rgba( 215, 91, 181,1)',\n                        backgroundColor: 'rgba(125, 291, 181, 0.5)',\n\n                        strokeColor: 'rgba(125,32,190,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }\n\n                ]//Fin del DataSets\n\n            }// Fin de chartData\n        })\n\n    }\n\n    componentWillReceiveProps() {\n        console.log(\"componentWillReceiveProps\")\n        // m√©todo llamado al recibir nuevas propiedades que sirve para actualizar el estado\n        // con base a las nuevas propiedades.\n\n        this.setState({\n\n            metricsDay: this.props.metricsDay,\n            dateData: this.props.dateData\n\n        })    \n\n        // Se evalua la m√©trica para saber si es temperatura, calidad de aire, humedad\n        // y dependiendo del resultado se le manda dentro del al setState this.state.metricsDay.temperature\n\n        let metric = this.props.metric // (temperatura, calidad de aire, humedad)\n\n        // Se evalua la m√©trica para saber si es temperatura, calidad de aire, humedad\n        // y dependiendo del resultado se le manda dentro del al setState this.state.metricsDay.temperature\n\n        let TotalMetricMonth = [] // Donde se guardar√° el array con el promedio mensual\n\n        if (metric === \"Temperature\") {\n\n            this.props.metricsMonth.forEach(element => {\n\n                TotalMetricMonth.push(element.totalTemperature)\n            })\n        }\n        else if (metric === \"AirQuality\") {\n\n            this.props.metricsMonth.forEach(element => {\n\n                TotalMetricMonth.push(element.totalAirQuality)\n            })\n        }\n        else if (metric === \"Humidity\") {\n\n            this.props.metricsMonth.forEach(element => {\n\n                TotalMetricMonth.push(element.totalHumidity)\n            })\n\n        }\n\n        console.log(\"TotalMetricMonth: \")\n        console.log(TotalMetricMonth)\n\n        // Se crea el array con los di√°s (eje x de la gr√°fica)\n\n        let daysArray = [] // Crea arreglo vacio para meter id con los dias\n\n        this.state.metricsMonth.forEach(element => {\n            // Itera sobre el objeto metricsMonth y coje cada valor del id(d√≠as donde hay info) ylos guarda dentro de daysArray\n            daysArray.push(element.id)\n\n        })\n\n\n        this.setState({\n\n            chartDataAverageMonth: {\n\n                labels: daysArray,\n\n                datasets: [\n\n                    {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                        label: `M1 ${this.state.metrica} ${this.state.unidad}`, //Se le pasa la metrica y su unidad\n                        data: TotalMetricMonth,\n\n                        fillColor: 'rgba( 215, 91, 181,1)',\n                        backgroundColor: 'rgba(125, 291, 181, 0.5)',\n\n                        strokeColor: 'rgba(125,32,190,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }\n\n                ]//Fin del DataSets\n\n            }// Fin de chartData\n        })\n\n    }\n\n\n    render() {\n\n        let unidad = this.state.unidad // Para llevar el valor de la unidad hasta Ticks (Etiqueta eje Y). \n\n        let split = this.state.dateData.split('-')\n\n        let year = split[0]\n       \n        let month = split[1]\n       \n        return (\n\n            <div className=\"Chart\">\n                <Line\n                    data={this.state.chartDataAverageMonth}\n                    //width={100}\n                    //height={50}\n                    options={{\n                        title: {\n                            display: true,\n                            text: `Promedio de ${this.state.metrica}: Mes ${month} de ${year}`,\n                            fontSize: 30,\n                            fontColor: 'teal'\n\n                        },\n                        legend: {\n                            display: true,\n                            labels: {\n                                fontColor: 'black',\n                                fontSize: 20\n                            }\n                        },\n                        scales: {\n\n                            yAxes: [\n\n                                {\n                                    scaleLabel: {\n                                        display: 'true',\n                                        labelString: `${this.state.metrica}`,\n                                        fontColor: 'black',\n                                        fontSize: 20,\n                                        position: 'top'\n                                    },\n                                    ticks: {\n                                        display: true,\n                                        labelString: `${this.state.unidad}`,\n                                        fontSize: 20,\n                                        fontColor: 'black',\n                                        // Include a dollar sign in the ticks\n\n                                        callback: function (value, index, values, ) {\n\n                                            return `${value} ${unidad}`\n\n                                        }\n                                    }\n                                }],\n\n                            xAxes: [{\n                                scaleLabel: {\n                                    display: 'true',\n                                    labelString: 'Hora',\n                                    fontColor: 'black',\n                                    fontSize: 20,\n                                    position: 'top'\n                                },\n\n                                ticks: {\n                                    display: true,\n                                    labelString: 'Hora',\n                                    fontSize: 16,\n                                    fontColor: 'black',\n\n                                }\n                            }]\n                        }\n\n                    }}\n                />\n\n            </div>\n\n        )\n    }\n}\n\nexport default AverageMonthChart","// ModulesDayChart: Gr√°fica de los 4 modulos para el d√≠a selecionado \n//                  (Se le pasa como props).\n\n\nimport React, { Component } from 'react' // NO necesitan comas seg√∫n el standart ES6\n// manera destructurada la clase Component\n\nimport { Bar, Line, Pie, Doughnut } from 'react-chartjs-2';\n// Importa el/los tipos de gr√°ficas que se renderizaran:\n// Bar: Barra, Line: Linea, Pie: Torta/pastel, Doughnut: Dona.\n\nclass ModulesDayChart extends Component {\n\n    constructor(...props) {\n\n        super(...props)\n\n\n        this.state = {\n\n            metricsDay: this.props.metricsDay,// objeto general con la informaci√≥n de los dias\n\n            chartDataModulesDay: {}, //Datos de grafica por dia.\n\n            dateData: this.props.dateData, // Fecha de datos que se quiere \n\n            unidad: this.props.unidad,\n\n            metric: this.props.metric,\n\n            metrica: this.props.metrica\n\n\n            // Fin de chartData\n        } // Fin deState\n\n    }\n\n    componentWillMount() {\n\n        // m√©todo llamado al recibir nuevas propiedades que sirve para actualizar el estado\n        console.log(\"componentDidMount\")\n\n        let metric = this.state.metric // (temperatura, calidad de aire, humedad)\n\n        // Se evalua la m√©trica para saber si es temperatura, calidad de aire, humedad\n        // y dependiendo del resultado se le manda dentro del al setState this.state.metricsDay.temperature\n        \n        let dataMetric\n\n        if (metric === \"Temperature\") {\n\n            dataMetric = this.state.metricsDay.temperature\n        }\n        else if (metric === \"AirQuality\") {\n\n            dataMetric = this.state.metricsDay.airQuality\n        }\n        else if (metric === \"Humidity\") {\n\n            dataMetric = this.state.metricsDay.humidity\n        }\n\n        console.log(\"this.state.metricsDay.temperature:\")\n        console.log(this.state.metricsDay.temperature)\n\n        console.log(\"dataMetric:\")\n        console.log(dataMetric)\n\n        // Grafica de los 4 Modulos del dia\n        this.setState({\n\n            chartDataModulesDay: {\n\n                labels: this.state.metricsDay.hours,\n\n                datasets: [\n\n                    {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                        label: `M1 ${this.props.metrica} ${this.state.unidad}`, //Se le pasa la metrica y su unidad\n                        data: dataMetric.m1,\n\n                        fillColor: 'rgba( 215, 91, 181,1)',\n                        backgroundColor: 'rgba(125, 291, 181, 0.5)',\n\n                        strokeColor: 'rgba(125,32,190,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }, // Fin Modulo1\n                    {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                        label: `M2 ${this.props.metrica} ${this.state.unidad}`,\n                        data: dataMetric.m2,\n\n                        fillColor: 'rgba( 225, 191, 81,1)',\n                        backgroundColor: 'rgba(225, 191, 81, 0.5)',\n\n                        strokeColor: 'rgba(255,252,95,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }, // Fin de M2\n                    {// Modulo 3: this.state.metrics.moduleTemperature.m1\n                        label: `M3 ${this.props.metrica} ${this.state.unidad}`,\n                        data: dataMetric.m3,\n\n                        fillColor: 'rgba( 125, 191, 31,1)',\n                        backgroundColor: 'rgba(215, 111, 281, 0.5)',\n\n                        strokeColor: 'rgba(255,252,95,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }, // Fin de M3\n                    {// Modulo 4: this.state.metrics.moduleTemperature.m1\n                        label: `M4 ${this.props.metrica} ${this.state.unidad}`,\n                        data: dataMetric.m4,\n\n                        fillColor: 'rgba( 25, 11, 31,1)',\n                        backgroundColor: 'rgba(25, 255, 50, 0.5)',\n\n                        strokeColor: 'rgba(55,152,85,1)',\n                        borderColor: 'rgba(155,14,27,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    } // Fin M4\n\n                ]//Fin del DataSets\n\n            }// Fin de chartData\n        })\n\n    }\n\n    componentWillReceiveProps() {\n        // m√©todo llamado al recibir nuevas propiedades que sirve para actualizar el estado\n        // con base a las nuevas propiedades.\n    \n        this.setState({\n\n            metricsDay: this.props.metricsDay,\n            dateData: this.props.dateData\n\n        })\n\n\n        // Se evalua la m√©trica para saber si es temperatura, calidad de aire, humedad\n        // y dependiendo del resultado se le manda dentro del al setState this.state.metricsDay.temperature\n\n        let metric = this.props.metric // (temperatura, calidad de aire, humedad)\n\n        let dataMetric\n\n\n        if (metric === \"Temperature\") {\n\n            dataMetric = this.props.metricsDay.temperature\n        }\n        else if (metric === \"AirQuality\") {\n\n            dataMetric = this.props.metricsDay.airQuality\n        }\n        else if (metric === \"Humidity\") {\n\n            dataMetric = this.props.metricsDay.humidity\n        }\n        \n\n        console.log(\"dataMetric:\")\n        console.log(dataMetric)\n\n        this.setState({\n\n            chartDataModulesDay: {\n\n                labels: this.props.metricsDay.hours,\n\n                datasets: [\n\n                    {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                        label: `M1 ${this.props.metrica} ${this.state.unidad}`, //Se le pasa la metrica y su unidad\n                        data: dataMetric.m1,\n\n                        fillColor: 'rgba( 215, 91, 181,1)',\n                        backgroundColor: 'rgba(125, 291, 181, 0.5)',\n\n                        strokeColor: 'rgba(125,32,190,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }, // Fin Modulo1\n                    {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                        label: `M2 ${this.props.metrica} ${this.state.unidad}`,\n                        data: dataMetric.m2,\n\n                        fillColor: 'rgba( 225, 191, 81,1)',\n                        backgroundColor: 'rgba(225, 191, 81, 0.5)',\n\n                        strokeColor: 'rgba(255,252,95,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }, // Fin de M2\n                    {// Modulo 3: this.state.metrics.moduleTemperature.m1\n                        label: `M3 ${this.props.metrica} ${this.state.unidad}`,\n                        data: dataMetric.m3,\n\n                        fillColor: 'rgba( 125, 191, 31,1)',\n                        backgroundColor: 'rgba(215, 111, 281, 0.5)',\n\n                        strokeColor: 'rgba(255,252,95,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }, // Fin de M3\n                    {// Modulo 4: this.state.metrics.moduleTemperature.m1\n                        label: `M4 ${this.props.metrica} ${this.state.unidad}`,\n                        data: dataMetric.m4,\n\n                        fillColor: 'rgba( 25, 11, 31,1)',\n                        backgroundColor: 'rgba(25, 255, 50, 0.5)',\n\n                        strokeColor: 'rgba(55,152,85,1)',\n                        borderColor: 'rgba(155,14,27,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    } // Fin M4\n\n                ]//Fin del DataSets\n\n            }// Fin de chartData\n        })\n\n    }\n\n\n    render(){\n\n      let  unidad = this.state.unidad // Para llevar el valor de la unidad hasta Ticks (Etiqueta eje Y). \n      \n      return(\n\n            <div className=\"Chart\">\n                <Line \n                    data={this.state.chartDataModulesDay}\n                    //width={100}\n                    //height={50}\n                    options={{\n                        title: {\n                            display: true,\n                            text: `Comparaci√≥n de ${this.props.metrica}: d√≠a ${this.state.dateData}`,\n                            fontSize: 30,\n                            fontColor: 'teal'\n\n                        },\n                        legend: {\n                            display: true,\n                            labels: {\n                                fontColor: 'black',\n                                fontSize: 20\n                            }\n                        },\n                        scales: {\n\n                            yAxes: [\n                                \n                                {\n                                    scaleLabel: {\n                                        display: 'true',\n                                        labelString: `${this.props.metrica}`,\n                                        fontColor: 'black',\n                                        fontSize: 20,\n                                        position: 'top'\n                                    },\n                                    ticks: { \n                                        display: true,\n                                        labelString: `${this.props.unidad}`,\n                                        fontSize: 20,\n                                        fontColor: 'black',\n                                        // Include a dollar sign in the ticks\n                                        \n                                        callback: function (value, index, values,){\n\n                                            return `${value} ${unidad}`\n\n                                        }\n                                }\n                            }],\n\n                            xAxes: [{\n                                scaleLabel: {\n                                    display: 'true',\n                                    labelString: 'Hora',\n                                    fontColor: 'black',\n                                    fontSize: 20,\n                                    position: 'top'\n                                },\n\n                                ticks: {\n                                    display: true,\n                                    labelString: 'Hora',\n                                    fontSize: 16,\n                                    fontColor: 'black',\n\n                                }\n                            }]\n                        }\n\n                    }}\n                />\n\n            </div>\n        \n        )\n    }\n}\n\nexport default ModulesDayChart","\n// ModulesDayChart: Gr√°fica de los 4 modulos para el d√≠a selecionado \n//                  (Se le pasa como props).\n\n\nimport React, { Component } from 'react' // NO necesitan comas seg√∫n el standart ES6\n// manera destructurada la clase Component\n\nimport { Bar, Line, Pie, Doughnut } from 'react-chartjs-2';\n// Importa el/los tipos de gr√°ficas que se renderizaran:\n// Bar: Barra, Line: Linea, Pie: Torta/pastel, Doughnut: Dona.\n\nclass ModulesMonthChart extends Component {\n\n    constructor(...props) {\n\n        super(...props)\n\n\n        this.state = {\n\n            metricsMonth: this.props.metricsMonth,// objeto general con la informaci√≥n de los dias\n\n            chartDataModulesMonth: {}, //Datos de grafica por dia.\n\n            dateData: this.props.dateData, // Fecha de datos que se quiere \n\n            unidad: this.props.unidad,\n\n            metric: this.props.metric,\n\n            metrica: this.props.metrica\n\n\n            // Fin de chartData\n        } // Fin deState\n\n    }\n\n    componentWillMount() {\n\n        // m√©todo llamado al recibir nuevas propiedades que sirve para actualizar el estado\n        console.log(\"componentDidMount\")\n        console.log(\"componentDidMount\")\n        console.log(\"componentDidMount\")\n        console.log(\"componentDidMount\")\n\n        console.log(\"Data Metric Month: Props\")\n        console.log(this.props.metricsMonth)\n\n        console.log(\"Data Metric Month: State\")\n        console.log(this.state.metricsMonth)\n\n    // Se crea el array con los di√°s (eje x de la gr√°fica)\n        \n        let daysArray = [] // Crea arreglo vacio para meter id con los dias\n\n        this.state.metricsMonth.forEach(element => {\n        // Itera sobre el objeto metricsMonth y coje cada valor del id(d√≠as donde hay info) ylos guarda dentro de daysArray\n            daysArray.push(element.id)\n\n        })\n\n        console.log(\"daysArray:\")\n        console.log(daysArray) // Arreglo con los d√≠as ya creados\n\n        //Se crea los arrays con la informaci√≥n de cada sensor de cada d√≠a promediado\n\n        let m1 = [] // Valores del mes de M1\n\n        let m2 = [] // Valores del mes de M2\n\n        let m3 = [] // Valores del mes de M3\n\n        let m4 = [] // Valores del mes de M4\n\n        let metric = this.state.metric // (temperatura, calidad de aire, humedad)\n\n\n        if (metric === \"Temperature\") {\n\n            this.state.metricsMonth.forEach(element => {\n\n                m1.push(element.temperature[0])\n                m2.push(element.temperature[1])\n                m3.push(element.temperature[2])\n                m4.push(element.temperature[3])\n\n            })\n       \n        }\n        else if (metric === \"AirQuality\") {\n\n            this.state.metricsMonth.forEach(element => {\n\n                m1.push(element.airQuality[0])\n                m2.push(element.airQuality[1])\n                m3.push(element.airQuality[2])\n                m4.push(element.airQuality[3])\n\n            })\n       \n        }\n        else if (metric === \"Humidity\") {\n\n            this.state.metricsMonth.forEach(element => {\n\n                m1.push(element.humidity[0])\n                m2.push(element.humidity[1])\n                m3.push(element.humidity[2])\n                m4.push(element.humidity[3])\n\n            })\n       \n        }\n\n        console.log(\"Metric:\")\n        console.log(metric)\n        \n        console.log(\"M1:\")\n        console.log(m1)\n\n        console.log(\"m2:\")\n        console.log(m2)\n\n        console.log(\"M3:\")\n        console.log(m3)\n\n        console.log(\"M4:\")\n        console.log(m4)\n\n        // (temperatura, calidad de aire, humedad)\n\n        // Se evalua la m√©trica para saber si es temperatura, calidad de aire, humedad\n        // y dependiendo del resultado se le manda dentro del al setState this.state.metricsDay.temperature\n\n      //  Grafica de los 4 Modulos del dia\n\n        this.setState({\n\n            chartDataModulesMonth: {\n\n                labels: daysArray,\n\n                datasets: [\n\n                    {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                        label: `M1 ${this.props.metrica} ${this.state.unidad}`, //Se le pasa la metrica y su unidad\n                        data: m1,\n\n                        fillColor: 'rgba( 215, 91, 181,1)',\n                        backgroundColor: 'rgba(125, 291, 181, 0.5)',\n\n                        strokeColor: 'rgba(125,32,190,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }, // Fin Modulo1\n                    {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                        label: `M2 ${this.props.metrica} ${this.state.unidad}`,\n                        data: m2,\n\n                        fillColor: 'rgba( 225, 191, 81,1)',\n                        backgroundColor: 'rgba(225, 191, 81, 0.5)',\n\n                        strokeColor: 'rgba(255,252,95,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }, // Fin de M2\n                    {// Modulo 3: this.state.metrics.moduleTemperature.m1\n                        label: `M3 ${this.props.metrica} ${this.state.unidad}`,\n                        data: m3,\n\n                        fillColor: 'rgba( 125, 191, 31,1)',\n                        backgroundColor: 'rgba(215, 111, 281, 0.5)',\n\n                        strokeColor: 'rgba(255,252,95,1)',\n                        borderColor: 'rgba(255,214,127,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    }, // Fin de M3\n                    {// Modulo 4: this.state.metrics.moduleTemperature.m1\n                        label: `M4 ${this.props.metrica} ${this.state.unidad}`,\n                        data: m4,\n\n                        fillColor: 'rgba( 25, 11, 31,1)',\n                        backgroundColor: 'rgba(25, 255, 50, 0.5)',\n\n                        strokeColor: 'rgba(55,152,85,1)',\n                        borderColor: 'rgba(155,14,27,1)',\n                        borderWidth: 2,\n\n                        pointBorderWidth: 3,\n                        pointRadius: 4,\n                        pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                        pointColor: 'rgba(151,187,205,1)',\n                        pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                        pointHighlightFill: 'rgba(255,214,127,1)',\n                        pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                    } // Fin M4\n\n                ]//Fin del DataSets\n\n            }// Fin de chartData\n        })\n\n    }\n\n    componentWillReceiveProps() {\n        // m√©todo llamado al recibir nuevas propiedades que sirve para actualizar el estado\n        // con base a las nuevas propiedades.\n\n\n            // m√©todo llamado al recibir nuevas propiedades que sirve para actualizar el estado\n            console.log(\"componentWillReceiveProps\")\n            console.log(\"componentWillReceiveProps\")\n            console.log(\"componentWillReceiveProps\")\n\n        this.setState({\n\n            metricsDay: this.props.metricsMonth,\n            dateData: this.props.dateData\n\n        })\n        \n\n            console.log(\"Data Metric Month: Props\")\n            console.log(this.props.metricsMonth)\n\n            console.log(\"Data Metric Month: State\")\n            console.log(this.state.metricsMonth)\n\n            // Se crea el array con los di√°s (eje x de la gr√°fica)\n\n            let daysArray = [] // Crea arreglo vacio para meter id con los dias\n\n            this.props.metricsMonth.forEach(element => {\n                // Itera sobre el objeto metricsMonth y coje cada valor del id(d√≠as donde hay info) ylos guarda dentro de daysArray\n                daysArray.push(element.id)\n\n            })\n\n            console.log(\"daysArray:\")\n            console.log(daysArray) // Arreglo con los d√≠as ya creados\n\n            //Se crea los arrays con la informaci√≥n de cada sensor de cada d√≠a promediado\n\n            let m1 = [] // Valores del mes de M1\n\n            let m2 = [] // Valores del mes de M2\n\n            let m3 = [] // Valores del mes de M3\n\n            let m4 = [] // Valores del mes de M4\n\n            let metric = this.props.metric // (temperatura, calidad de aire, humedad)\n\n\n            if (metric === \"Temperature\") {\n\n                this.props.metricsMonth.forEach(element => {\n\n                    m1.push(element.temperature[0])\n                    m2.push(element.temperature[1])\n                    m3.push(element.temperature[2])\n                    m4.push(element.temperature[3])\n\n                })\n\n            }\n            else if (metric === \"AirQuality\") {\n\n                this.props.metricsMonth.forEach(element => {\n\n                    m1.push(element.airQuality[0])\n                    m2.push(element.airQuality[1])\n                    m3.push(element.airQuality[2])\n                    m4.push(element.airQuality[3])\n\n                })\n\n            }\n            else if (metric === \"Humidity\") {\n\n                this.props.metricsMonth.forEach(element => {\n\n                    m1.push(element.humidity[0])\n                    m2.push(element.humidity[1])\n                    m3.push(element.humidity[2])\n                    m4.push(element.humidity[3])\n\n                })\n\n            }\n\n            console.log(\"Metric:\")\n            console.log(metric)\n\n            console.log(\"M1:\")\n            console.log(m1)\n\n            console.log(\"m2:\")\n            console.log(m2)\n\n            console.log(\"M3:\")\n            console.log(m3)\n\n            console.log(\"M4:\")\n            console.log(m4)\n\n            // (temperatura, calidad de aire, humedad)\n\n            // Se evalua la m√©trica para saber si es temperatura, calidad de aire, humedad\n            // y dependiendo del resultado se le manda dentro del al setState this.state.metricsDay.temperature\n\n            //  Grafica de los 4 Modulos del dia\n\n            this.setState({\n\n                chartDataModulesMonth: {\n\n                    labels: daysArray,\n\n                    datasets: [\n\n                        {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                            label: `M1 ${this.props.metrica} ${this.state.unidad}`, //Se le pasa la metrica y su unidad\n                            data: m1,\n\n                            fillColor: 'rgba( 215, 91, 181,1)',\n                            backgroundColor: 'rgba(125, 291, 181, 0.5)',\n\n                            strokeColor: 'rgba(125,32,190,1)',\n                            borderColor: 'rgba(255,214,127,1)',\n                            borderWidth: 2,\n\n                            pointBorderWidth: 3,\n                            pointRadius: 4,\n                            pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                            pointColor: 'rgba(151,187,205,1)',\n                            pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                            pointHighlightFill: 'rgba(255,214,127,1)',\n                            pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                        }, // Fin Modulo1\n                        {// Modulo 1: this.state.metrics.moduleTemperature.m1\n                            label: `M2 ${this.props.metrica} ${this.state.unidad}`,\n                            data: m2,\n\n                            fillColor: 'rgba( 225, 191, 81,1)',\n                            backgroundColor: 'rgba(225, 191, 81, 0.5)',\n\n                            strokeColor: 'rgba(255,252,95,1)',\n                            borderColor: 'rgba(255,214,127,1)',\n                            borderWidth: 2,\n\n                            pointBorderWidth: 3,\n                            pointRadius: 4,\n                            pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                            pointColor: 'rgba(151,187,205,1)',\n                            pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                            pointHighlightFill: 'rgba(255,214,127,1)',\n                            pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                        }, // Fin de M2\n                        {// Modulo 3: this.state.metrics.moduleTemperature.m1\n                            label: `M3 ${this.props.metrica} ${this.state.unidad}`,\n                            data: m3,\n\n                            fillColor: 'rgba( 125, 191, 31,1)',\n                            backgroundColor: 'rgba(215, 111, 281, 0.5)',\n\n                            strokeColor: 'rgba(255,252,95,1)',\n                            borderColor: 'rgba(255,214,127,1)',\n                            borderWidth: 2,\n\n                            pointBorderWidth: 3,\n                            pointRadius: 4,\n                            pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                            pointColor: 'rgba(151,187,205,1)',\n                            pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                            pointHighlightFill: 'rgba(255,214,127,1)',\n                            pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                        }, // Fin de M3\n                        {// Modulo 4: this.state.metrics.moduleTemperature.m1\n                            label: `M4 ${this.props.metrica} ${this.state.unidad}`,\n                            data: m4,\n\n                            fillColor: 'rgba( 25, 11, 31,1)',\n                            backgroundColor: 'rgba(25, 255, 50, 0.5)',\n\n                            strokeColor: 'rgba(55,152,85,1)',\n                            borderColor: 'rgba(155,14,27,1)',\n                            borderWidth: 2,\n\n                            pointBorderWidth: 3,\n                            pointRadius: 4,\n                            pointBackgroundColor: 'rgba(209, 231, 255, 0.3)',\n                            pointColor: 'rgba(151,187,205,1)',\n                            pointStrokeColor: 'rgba(255, 200, 107, 0.6)',\n                            pointHighlightFill: 'rgba(255,214,127,1)',\n                            pointHighlightStroke: 'rgba(255,214,127,1)'\n\n\n                        } // Fin M4\n\n                    ]//Fin del DataSets\n\n                }// Fin de chartData\n            })\n\n        }\n\n    render() {\n\n        let unidad = this.state.unidad // Para llevar el valor de la unidad hasta Ticks (Etiqueta eje Y). \n        \n        let split = this.state.dateData.split('-')\n\n        let year = split[0]\n\n        let month = split[1]\n        \n        return (\n\n            <div className=\"Chart\">\n                <Line\n                    data={this.state.chartDataModulesMonth}\n                    //width={100}\n                    //height={50}\n                    options={{\n                        title: {\n                            display: true,\n                            text: `Comparaci√≥n de ${this.state.metrica}: Mes ${month} de ${year}`,\n                            fontSize: 30,\n                            fontColor: 'teal'\n\n                        },\n                        legend: {\n                            display: true,\n                            labels: {\n                                fontColor: 'black',\n                                fontSize: 20\n                            }\n                        },\n                        scales: {\n\n                            yAxes: [\n\n                                {\n                                    scaleLabel: {\n                                        display: 'true',\n                                        labelString: `${this.props.metrica}`,\n                                        fontColor: 'black',\n                                        fontSize: 20,\n                                        position: 'top'\n                                    },\n                                    ticks: {\n                                        display: true,\n                                        labelString: `${this.props.unidad}`,\n                                        fontSize: 20,\n                                        fontColor: 'black',\n                                        // Include a dollar sign in the ticks\n\n                                        callback: function (value, index, values, ) {\n\n                                            return `${value} ${unidad}`\n\n                                        }\n                                    }\n                                }],\n\n                            xAxes: [{\n                                scaleLabel: {\n                                    display: 'true',\n                                    labelString: 'Hora',\n                                    fontColor: 'black',\n                                    fontSize: 20,\n                                    position: 'top'\n                                },\n\n                                ticks: {\n                                    display: true,\n                                    labelString: 'Hora',\n                                    fontSize: 16,\n                                    fontColor: 'black',\n\n                                }\n                            }]\n                        }\n\n                    }}\n                />\n\n            </div>\n\n        )\n    }\n}\n\nexport default ModulesMonthChart","// Componente CSA:\n \n// Es un Drawer de Material Ui\n\n// - Ubicaci√≥n:\n// - Sensores:\n// - Actuadores:\n// - Real Time\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { // Se importa react-router-dom y unos objetos necesarios\n    BrowserRouter as Router,// Se le asigna un 'Alias' para asiganrle el nombre de las versiones anteriores y hacerlos compatibles.\n    Route, // Objeto para el manejo de rutas.\n    Link,// Objeto para el manejo de Enlaces\n    Redirect,// Objeto para el manejo de Redireciones\n    withRouter,// Objeto para hacer Switch para modificar el valor de una ruta\n    Switch\n} from 'react-router-dom'\n\nimport {\n    Locacion, Temperature, AirQuality,\n    Humidity, Fire, Actuators\n} from \"../components/helpers/CsaComponents.jsx\"\n// CsaComponents \n\nimport classNames from \"classnames\";\n\nimport {\n    withStyles, Drawer, CssBaseline, AppBar, Toolbar, List, Typography, Divider, IconButton, MenuIcon, Button, LocationOnIcon, WbSunnyIcon, CloudIcon, WhatshotIcon, ToysIcon, WifiTetheringIcon, ChevronLeftIcon, ChevronRightIcon, ListItem, ListItemIcon, ListItemText, InboxIcon, MailIcon, Paper, Grid\n} from \"../components/helpers/MaterialUi.jsx\"\n// Todo los componentes material UI se deben agregar en \"./helpers/MaterialUi.jsx\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n    root: {\n        display: \"flex\",\n\n    },\n    appBar: {\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        })\n    },\n    appBarShift: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20\n    },\n    hide: {\n        display: \"none\"\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0\n    },\n    drawerPaper: {\n        width: drawerWidth\n    },\n    drawerHeader: {\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: \"0 8px\",\n        ...theme.mixins.toolbar,\n        justifyContent: \"flex-end\"\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing.unit * 3,\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        }),\n        marginLeft: -drawerWidth\n    },\n    contentShift: {\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n        }),\n        marginLeft: 0\n    }\n});\n\nclass Csa extends React.Component {\n\n    constructor(...props) {\n        super(...props)\n\n        this.state = {\n\n            open: false\n        };\n\n        // this.handleOnSubmit = this.handleOnSubmit.bind(this)\n        this.handleDrawerOpen = this.handleDrawerOpen.bind(this)\n        this.handleDrawerClose = this.handleDrawerClose.bind(this)\n    }\n\n\n    handleDrawerOpen() {\n        this.setState({ open: true })\n    }\n\n    handleDrawerClose() {\n        this.setState({ open: false })\n    }\n\n    render() {\n        const { classes, theme } = this.props;\n        const { open } = this.state;\n\n        return (\n\n            <Router>\n                <div className={classes.root}>\n                    <CssBaseline />\n\n                    <AppBar // Barra superior: Menu-Hamburguesa y CSA:\n                        position=\"fixed\"\n                        className={classNames(classes.appBar, {\n                            [classes.appBarShift]: open\n                        })}\n                    >\n                        <Toolbar disableGutters={!open}>\n\n\n\n                            <IconButton\n                                color=\"inherit\"\n                                aria-label=\"Open drawer\"\n                                onClick={this.handleDrawerOpen}\n                                className={classNames(classes.menuButton, open && classes.hide)}\n                            >\n                                <MenuIcon // Icono de menu-Hamburguesa\n                                />\n\n                            </IconButton>\n\n                            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                                CSA: Control Sistematizado Agr√≠cola\n                            </Typography>\n                            <Grid container\n                                spacing={16}\n                                //className={classes.demo}\n                                alignItems=\"center\"\n                                direction=\"row\"\n                                justify=\"flex-end\"\n                            >\n\n                                <Grid item ><Button color=\"inherit\" >Login</Button></Grid>\n\n                                <Grid item ><Button color=\"inherit\">Register</Button></Grid>\n\n                            </Grid>\n\n                        </Toolbar>\n\n                    </AppBar>\n\n                    <Drawer\n                        className={classes.drawer}\n                        variant=\"persistent\"\n                        anchor=\"left\"\n                        open={open}\n                        classes={{\n                            paper: classes.drawerPaper\n                        }}\n                    >\n                        <div className={classes.drawerHeader}>\n\n                            <IconButton onClick={this.handleDrawerClose}>\n                                {theme.direction === \"ltr\" ? (\n                                    <ChevronLeftIcon />\n                                ) : (\n                                        <ChevronRightIcon />\n                                    )}\n                            </IconButton>\n                        </div>\n\n                        <Divider />\n\n                        <List>\n\n                            <ListItem button key={<Link to=\"/csa/location\">Locaci√≥n</Link>}>\n                                <ListItemIcon>\n                                    <LocationOnIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={<Link to=\"/csa/location\">LOCACI√ìN</Link>} />\n                            </ListItem>\n\n                            <ListItem button key={<Link to=\"/csa/temperatura\">Temperatura</Link>}>\n                                <ListItemIcon>\n                                    <WbSunnyIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={<Link to=\"/csa/temperatura\"> TEMPERATURA</Link>} />\n                            </ListItem>\n\n                            <ListItem button key={<Link to=\"/csa/humedad\"> Humedad</Link>}>\n                                <ListItemIcon>\n                                    <CloudIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={<Link to=\"/csa/humedad\"> HUMEDAD</Link>} />\n                            </ListItem>\n\n                            <ListItem button key={<Link to=\"/csa/fuego\">Fuego</Link>}>\n                                <ListItemIcon>\n                                    <WhatshotIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={<Link to=\"/csa/fuego\"> FUEGO</Link>} />\n                            </ListItem>\n\n                            <ListItem button key={<Link to=\"/csa/actuadores\"> Actuadores</Link>}>\n                                <ListItemIcon>\n                                    <ToysIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={<Link to=\"/csa/actuadores\"> ACTUADORES</Link>} />\n                            </ListItem>\n\n                            <ListItem button key={<Link to=\"/csa/calidadAire\">Aire</Link>}>\n                                <ListItemIcon>\n                                    <WifiTetheringIcon />\n                                </ListItemIcon>\n                                <ListItemText primary={<Link to=\"/csa/calidadAire\">AIRE</Link>} />\n                            </ListItem>\n\n                        </List>\n\n                    </Drawer>\n\n                    <main className={classNames(classes.content, {\n                        [classes.contentShift]: open\n                    })}\n                    >\n                        <div className={classes.drawerHeader} />\n\n                        <Grid container >\n\n                            <Grid item xs={12}>\n                                <Switch>\n\n                                    <Route exact path='/csa' component={Locacion} />\n\n                                    <Route path='/csa/actuadores' component={Actuators} />\n\n                                    <Route path='/csa/temperatura' component={Temperature} />\n\n                                    <Route path='/csa/humedad' component={Humidity} />\n\n                                    <Route path='/csa/calidadAire' component={AirQuality} />\n\n                                    <Route path='/csa/fuego' component={Fire} />\n\n                                    <Route path='/csa/location' component={Locacion} />\n\n                                </Switch>\n\n                            </Grid>\n                        </Grid>\n                    </main>\n\n                </div>\n\n            </Router>\n        );\n    }\n}\n\nCsa.propTypes = {\n    classes: PropTypes.object.isRequired,\n    theme: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles, { withTheme: true })(Csa);\n","import {\n    DialogActions, AccountCircleIcon, TextField, DialogContentText, DialogContent, DialogTitle, Dialog, withStyles, Button \n} from \"../components/helpers/MaterialUi.jsx\"\n// Todo los componentes material UI se deben agregar en \"./helpers/MaterialUi.jsx\n\nimport React,{Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport Register from '../components/Register.jsx'\n\nimport SubmitButton from '../components/helpers/SubmitButton.jsx';\n\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n\n  },\n  textField: {\n    width: 500,\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n  containe: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: '1.5em',\n  },\n  item: {\n    verticalAlign:'middle',\n  },\n});\n\n\nclass Login extends React.Component {\n\n    constructor(...props){\n        super(...props)\n    \n        this.state = { \n            open: true,\n            form:{\n              email: '',\n              password: ''\n            }\n           \n        }\n        \n       // this.handleOnSubmit = this.handleOnSubmit.bind(this)\n      this.handleClickOpen = this.handleClickOpen.bind(this)\n      this.handleClose = this.handleClose.bind(this)\n      this.handleChange = this.handleChange.bind(this)\n      \n      \n    }\n\n  handleOnSubmit(e){\n\n    // alert('Click')\n    // e.preventDefault()\n\n    // let form = e.target\n\n    // console.log(form.email.value)\n\n    // console.log(form.password.value)\n\n    // this.setState({\n    //     mail: form.email.value,\n    //     password: form.password.value\n    // })\n\n    // console.log(this.state)\n  }\n\n\n  handleClickOpen(){\n    this.setState({ open: true })\n  }\n\n  handleClose(){\n    this.setState({ open: false })\n  }\n\n  handleChange(e) {\n\n    console.log(e.target) //+ \" name:\"+name \n    console.log(this.state)\n    \n\n    const { target: {name,value} } = e\n\n    this.setState({\n        \n        form:{\n            ...this.state.form,\n            [name]: value\n        } \n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { open, form:{email, password} } = this.state;\n\n\n    return (\n\n    <Fragment>\n        \n        <Button onClick={this.handleClickOpen}>Login</Button>\n        \n        <Dialog // <Dialog> Aqui va todo el Login </Dialog>\n          // fullScreen={fullScreen}\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"responsive-dialog-title\"\n          className={classes.container}\n        >\n          <DialogTitle id=\"responsive-dialog-title\">\n          \n             {/* {CSAlogo}  */}\n            \n            CSA: Control Sistematizado Av√≠cola\n          \n          </DialogTitle>\n          \n          <DialogContent>\n            {/* Aqui se mete el contenido */}\n            \n              <DialogContentText>\n                Ingrese su informaci√≥n para validar el acceso:\n              </DialogContentText>\n\n            <form onSubmit={this.handleOnSubmit} className={classes.container} noValidate autoComplete=\"off\">\n\n              <TextField\n                name=\"email\"\n                label=\"E-mail\"\n                className={classes.textField}\n                type = \"email\"\n                value = {email}\n                onChange={this.handleChange}\n                autoComplete=\"email\"\n                margin=\"normal\"\n                variant=\"filled\"\n              />\n              <br/>\n              <TextField\n                id=\"standard-password-input\"\n                name=\"password\"\n                label=\"Contrase√±a\"\n                className={classes.textField}\n                type=\"password\"\n                value={password}\n                onChange={this.handleChange}\n                autoComplete=\"current-password\"\n                margin=\"normal\" \n              />\n    \n            </form>\n            <br/>\n            <DialogContentText className={classes.containe}>\n              No estas registrado?\n              <br />\n            <div className={classes.containe}>\n            \n              <Register className={classes.item}/>\n            \n              <AccountCircleIcon className={classes.item}/>\n\n            </div>    \n            </DialogContentText>\n\n\n          </DialogContent>\n\n          <DialogActions>\n            {/* Aqui se mete los botones que realizn acciones */}\n           \n            <div onClick={this.handleClose}>\n              <SubmitButton handleOnClick={this.props.handleOnSubmit}  color=\"primary\">\n              </SubmitButton>\n            </div>\n\n          </DialogActions>\n        </Dialog>\n    </Fragment>\n    );\n  }\n}\n\nLogin.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\nexport default withStyles(styles)(Login);","// Entry Point Next.js: index.jsx \n\n// Desplegar√° unicamente Login:(Dialog MaterialUI)\n\n// Si estas autenticado => CSA\n// sino => Register.\n\nimport React, { Component, Fragment } from 'react';\nimport Link from 'next/link'\n\n//Componentes \nimport Login from './Login.jsx'\nimport Csa from './Csa.jsx'\n\n\nclass App extends React.Component {\n    \n    constructor(...props) {\n        super(...props)\n\n        this.state = {\n            \n            authed: false \n        }\n  \n        this.handleOnSubmit = this.handleOnSubmit.bind(this)\n        this.handleLogout = this.handleLogout.bind(this)\n    \n    }\n\n    handleOnSubmit(){\n\n        this.setState({\n            authed: true\n        })\n        \n    }\n\n    handleLogout() {\n\n        this.setState({\n            authed: false\n        })\n\n    }\n\n    render() {\n\n        return this.state.authed === true\n                ?( \n                <div>\n                    <Csa/>\n                    <button onClick={this.handleLogout}>Logout</button>\n                </div>\n                )\n                \n                :( \n                \n                <Login handleOnSubmit={this.handleOnSubmit}/>\n                \n                )\n        \n    }\n}\nexport default App","module.exports = require(\"@material-ui/core/AppBar\");","module.exports = require(\"@material-ui/core/Button\");","module.exports = require(\"@material-ui/core/CssBaseline\");","module.exports = require(\"@material-ui/core/Dialog\");","module.exports = require(\"@material-ui/core/DialogActions\");","module.exports = require(\"@material-ui/core/DialogContent\");","module.exports = require(\"@material-ui/core/DialogContentText\");","module.exports = require(\"@material-ui/core/DialogTitle\");","module.exports = require(\"@material-ui/core/Divider\");","module.exports = require(\"@material-ui/core/Drawer\");","module.exports = require(\"@material-ui/core/Grid\");","module.exports = require(\"@material-ui/core/IconButton\");","module.exports = require(\"@material-ui/core/List\");","module.exports = require(\"@material-ui/core/ListItem\");","module.exports = require(\"@material-ui/core/ListItemIcon\");","module.exports = require(\"@material-ui/core/ListItemText\");","module.exports = require(\"@material-ui/core/Paper\");","module.exports = require(\"@material-ui/core/Tab\");","module.exports = require(\"@material-ui/core/Tabs\");","module.exports = require(\"@material-ui/core/TextField\");","module.exports = require(\"@material-ui/core/Toolbar\");","module.exports = require(\"@material-ui/core/Typography\");","module.exports = require(\"@material-ui/core/styles\");","module.exports = require(\"@material-ui/icons/AccountCircle\");","module.exports = require(\"@material-ui/icons/ChevronLeft\");","module.exports = require(\"@material-ui/icons/ChevronRight\");","module.exports = require(\"@material-ui/icons/Cloud\");","module.exports = require(\"@material-ui/icons/LocationOn\");","module.exports = require(\"@material-ui/icons/Mail\");","module.exports = require(\"@material-ui/icons/Menu\");","module.exports = require(\"@material-ui/icons/MoveToInbox\");","module.exports = require(\"@material-ui/icons/Send\");","module.exports = require(\"@material-ui/icons/Toys\");","module.exports = require(\"@material-ui/icons/WbSunny\");","module.exports = require(\"@material-ui/icons/Whatshot\");","module.exports = require(\"@material-ui/icons/WifiTethering\");","module.exports = require(\"@material-ui/lab/Slider\");","module.exports = require(\"axios\");","module.exports = require(\"classnames\");","module.exports = require(\"moment\");","module.exports = require(\"next/link\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-chartjs-2\");","module.exports = require(\"react-router-dom\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AAIA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAbA;AAAA;AACA;AAkBA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAaA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;;;AACA;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAEA;AACA;AAAA;AAHA;AAAA;AAAA;AAQA;AAEA;AAFA;AAOA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAGA;AAAA;AAGA;AADA;AAEA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAmBA;AAAA;AACA;AAAA;AAQA;;;;AA/LA;AACA;AAiMA;AACA;AADA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzOA;AACA;AAEA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AATA;AAcA;AACA;AAEA;AACA;AAEA;AAvBA;AAyBA;AACA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAGA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAOA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AASA;;;;AAjFA;AACA;AAkFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AAGA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAKA;AACA;AAxBA;AAyBA;AA9BA;AAgCA;AACA;;;AAGA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAJA;AACA;AAQA;AACA;AACA;AAFA;AAMA;AACA;AACA;AAAA;AAEA;AACA;AADA;AACA;AAEA;AACA;AADA;AAIA;AAGA;AACA;AADA;AAIA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAMA;AAAA;AAEA;AACA;AADA;AACA;AAEA;AACA;AADA;AAIA;AAGA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AAzLA;AACA;AA2LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1OA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAHA;AAMA;AAVA;AAWA;AACA;;;AACA;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AAGA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAOA;AACA;;;;AA7CA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AAGA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAKA;AACA;AAxBA;AAyBA;AA9BA;AAgCA;AACA;;;AAGA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAJA;AACA;AAQA;AACA;AACA;AAFA;AAMA;AACA;AACA;AAAA;AAEA;AACA;AADA;AACA;AAEA;AACA;AADA;AAIA;AAGA;AACA;AADA;AAIA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAMA;AAAA;AAEA;AACA;AADA;AACA;AAEA;AACA;AADA;AAIA;AAGA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAKA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AA3LA;AACA;AA6LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5OA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AAOA;AATA;AACA;AADA;AAAA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AAGA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAKA;AACA;AAxBA;AAyBA;AA9BA;AAgCA;AACA;;;AAGA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAJA;AACA;AAQA;AACA;AACA;AAFA;AAMA;AACA;AACA;AAAA;AAEA;AACA;AADA;AACA;AAEA;AACA;AADA;AAIA;AAGA;AACA;AADA;AAIA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAMA;AAAA;AAEA;AACA;AADA;AACA;AAEA;AACA;AADA;AAIA;AAGA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;AA1LA;AACA;AA4LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3OA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AALA;AAAA;AACA;AAWA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AAXA;AAYA;AACA;;;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAFA;AAIA;AAEA;AACA;;;AAEA;AACA;AACA;;;AAIA;AAAA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAVA;AAgBA;;;;AA5DA;AACA;AA8DA;AACA;AADA;AAIA;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;;;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAGA;AAAA;AAGA;AAAA;AAOA;AACA;;;;AA3BA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AACA;AAQA;;;;;;;;;;;;;;;;;;AAEA;AAEA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;;;;AA/BA;AACA;AAiCA;AACA;AADA;AAIA;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAVA;AAAA;AACA;AAcA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAEA;AAEA;AAIA;AACA;AAjBA;AALA;AAuBA;AACA;;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAwBA;AACA;AA/BA;AAFA;AAmCA;;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAHA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAwBA;AACA;AA/BA;AAFA;AAmCA;;;AAGA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAXA;AARA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AATA;AA3BA;AAfA;AAJA;AAuEA;;;;AAjQA;AACA;AAmQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/QA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAEA;AAEA;AAIA;AACA;AAjBA;AALA;AAuBA;AACA;;;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAwBA;AACA;AA/BA;AAFA;AAmCA;;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAHA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAwBA;AACA;AA/BA;AAFA;AAmCA;;;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAAA;AAEA;AAEA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAXA;AARA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AATA;AA3BA;AAfA;AAJA;AAuEA;;;;AAvSA;AACA;AAySA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtTA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAEA;AAEA;AAIA;AACA;AAjBA;AALA;AAuBA;AACA;;;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAwBA;AACA;AA9FA;AAFA;AAkGA;;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAHA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAwBA;AACA;AA9FA;AAFA;AAkGA;;;AAGA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAXA;AARA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AATA;AA3BA;AAfA;AAJA;AAuEA;;;;AAvXA;AACA;AAyXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpYA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAEA;AAEA;AAIA;AACA;AAjBA;AALA;AAuBA;AACA;;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAwBA;AACA;AA9FA;AAFA;AAkGA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAHA;AAQA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAwBA;AACA;AA9FA;AAFA;AAkGA;;;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAAA;AAEA;AAEA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAXA;AARA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AATA;AA3BA;AAfA;AAJA;AAuEA;;;;AAvgBA;AACA;AAygBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACthBA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAGA;AACA;AAKA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAPA;AASA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAjDA;AAAA;AACA;AAyDA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAFA;AACA;AAKA;AACA;AAVA;AAWA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AAAA;AAGA;AACA;AACA;AAFA;AAMA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAGA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AAAA;AAEA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;AAAA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAYA;;;;AArLA;AACA;AAuLA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3RA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAtBA;AAAA;AACA;AA2BA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AACA;AAHA;AAUA;AACA;AACA;AAfA;AAkBA;AACA;;;AACA;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAEA;AACA;AAAA;AAHA;AAAA;AAAA;AAQA;AAEA;AAFA;AAOA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;AAAA;AAGA;AADA;AAEA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAcA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AAAA;AAWA;AAAA;AACA;AAAA;AAAA;AAQA;;;;AA3JA;AACA;AA6JA;AACA;AADA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3MA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAFA;AAKA;AACA;AATA;AAWA;AACA;;;AACA;AAEA;AACA;AADA;AAIA;;;AAEA;AAEA;AACA;AADA;AAIA;;;AAEA;AAEA;AAIA;AAAA;AAMA;AAAA;AAIA;;;;AA/CA;AACA;AAgDA;;;;;;;;;;;;;;;;;;;;;;;AChsourceRoot":""}